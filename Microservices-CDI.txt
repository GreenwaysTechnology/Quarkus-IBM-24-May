		      Jakarta Contexts and Dependency Injection 
...................................................................................
			  Dependency Injection - IOC
.....................................................................................
What is IOC?
 Inversion of Control is design pattern for creating depandent objects and injecting into another.

How IOC is implemented in Spring?
 Spring Container is the reference implemnetation of IOC design pattern

How IOC is implemented in Quarkus?
  Quarkus uses JEE spec called CDI - context Dependency Injection

What is CDI?
  CDI is JEE Spec? -Jakarta Contexts and Dependency Injection

Quarkus and CDI ?
 Quarkus has not implemented 100% CDI spec due to some reasons.

"Quarkus ArC" is a build-time oriented dependency injection based on CDI 2.0.

Spring and JEE dependencies are resolved "during runtime" only

Quarkus depedencies are resolved "During build time".


			Quarkus Application
				|
	         Quarkus Arc -layer built on the top of CDI
				  |
		  Jakarta Contexts and Dependency Injection


JEE CDI Vs Quarkus CDI:
......................

JEE CDI "resolves" bean dependency during runtime of an application,after deployment, if something goes wrong, errors are reported only during runtime.

Quarkus CDI uses a model called "Build Time"
   During application build process, if there is any dependency missmatch related errors are reported.

Build-time Processing Benefits and Drawbacks:
..............................................

Fail Fast
  Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as AmbiguousResolutionException or UnsatisfiedResolutionException.

Instant Startup
  When the app starts ArC just loads all the metadata and initializes some internal structures. There is no need to analyze the application classes again. This means negligible startup overhead.
 
Minimized Runtime
  In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars. Weld 3.1.1 (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar. In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint.

Optimized Code Paths and Metadata Structures

  When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already. 

Core Features of CDI:

1.Bean: What is Bean?

Bean is java object

Types of Beans:

1.Application Beans(pojos)
   Objects are created by developer 
   Objects life cycle is managed by developer and JVM

2.Container managed Bean
   Objects created by the Container


What is container?
   Container is runtime where quarkus apps are running.
 
  Object life cycle are managed by Runtime 

What are the advantages of Container Managed Bean?


>The developer can focus application logic.

			 CDI implemenation

CDI is implemented via "Annotations"


Apis in cdi:

1.jakarta.inject
2.jakarta.enterprise.inject - core di apis
3.jakarta.enterprise.context - scope and contextuaal apis
4.jakarta.enterprise.events -  publishing events and listening events-  container wide event driven programming
5.jakarta.enterprise.util
6.jakarta.interceptor

Common Annoations:

1.@Inject  
2.@Qualifer
3.LifeCycle of Bean
   @ApplicationScoped =@component,@Bean,@Service......
   @SessionScoped
   @RequestScoped
   @SingleTon

ApplicationScoped vs SingleTon
 Both are same - single instance across the application
 but SingleTon beans not available inside testing env..
 
4.@Observes - event listner - StartupEvent

...................................................................................
				Quarkus Application Archiecture
...................................................................................

There are two layers

1.controllers
   Using Rest api
2.services
   Using plain java class called services...


Without Dependency Injection

package com.ibm.cdi.service;

public class WelcomeService {

    public String sayHello() {
        return "Hello";
    }
}
package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    private WelcomeService welcomeService = new WelcomeService();

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}

The class "WelcomeService" is called Bean class- Application Bean- we have to create instance of this class.

Quarkus recommends to apply "IOC" principle: Dont create object by yourself. ask the container to create and manage- just use created object.

Service class need to be annotated using the following any one of the annoations

@ApplicationScoped
@SingleTon
@SessionScoped
@RequestScoped

These annotations marks the class , so that the container creates object automatically and make it available ready for use.


With Depedency Injection.

package com.ibm.cdi.service;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class WelcomeService {

    public String sayHello() {
        return "Hello";
    }
}

package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

   // private WelcomeService welcomeService = new WelcomeService();
    @Inject
    private WelcomeService welcomeService;

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}

.....................................................................................	     		Types of Injection in Quarkus  -Injection Points

1.Setter Injection
2.Field Injection
3.Constructor injection

Quarkus supports all types of injection but recommened only "Field Injection"

Field Injection:
package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

   // private WelcomeService welcomeService = new WelcomeService();
    @Inject
    private WelcomeService welcomeService;

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}

Setter Injection:
.................
package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    // private WelcomeService welcomeService = new WelcomeService();
//    @Inject
//    private WelcomeService welcomeService;
    private WelcomeService welcomeService;

    public WelcomeService getWelcomeService() {
        return welcomeService;
    }

    @Inject
    public void setWelcomeService(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}

Constructor Injection:
......................
package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    // private WelcomeService welcomeService = new WelcomeService();
//    @Inject
//    private WelcomeService welcomeService;
    private WelcomeService welcomeService;

    public WelcomeResource() {
    }

    @Inject
    public WelcomeResource(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}

................................................................................

Note:
 private keyword is not necessary in any type DI.
...................................................................................
package com.ibm.cdi.resources;

import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    @Inject
    WelcomeService welcomeService;
    @GET
    public String sayWelcome() {
        return welcomeService.sayHello();
    }
}
....................................................................................
			Injecting Multiple Depedencies
....................................................................................
package com.ibm.cdi.service;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GoodByService {

    public String sayGoodBye() {
        return "GoodBye";
    }
}
package com.ibm.cdi.resources;

import com.ibm.cdi.service.GoodByService;
import com.ibm.cdi.service.WelcomeService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    @Inject
    WelcomeService welcomeService;
    @Inject
    GoodByService goodByService;

    @GET
    public String sayWelcome() {
        return welcomeService.sayHello() + " " + goodByService.sayGoodBye();
    }
}
....................................................................................
			interface based Depedency
....................................................................................
package com.ibm.cdi.service.interfaces;

public interface NumberGenerator {
    String generateISBNGenerator();
}

package com.ibm.cdi.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;

import java.util.Random;

@ApplicationScoped
public class ISBNGenerator implements NumberGenerator {
    @Override
    public String generateISBNGenerator() {
        return "15-232323232" + Math.abs(new Random().nextInt());
    }
}
package com.ibm.cdi.service.interfaces;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("books")
public class BookResource {
    @Inject
    NumberGenerator generator;

    @GET
    public String getIsbn(){
        return generator.generateISBNGenerator();
    }
}
.....................................................................................
			Interface with Multiple Implementation
.....................................................................................

package com.ibm.cdi.service.interfaces;

public interface Repository {
    String findAll();
}

package com.ibm.cdi.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class SQLRepositoryImpl implements Repository{
    @Override
    public String findAll() {
        return "SQL FindAll";
    }
}
package com.ibm.cdi.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class NOSQLRepositoryImpl implements  Repository{
    @Override
    public String findAll() {
        return "NoSql FindAll";
    }
}
package com.ibm.cdi.service.interfaces;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("database")
public class DatabaseResource {

    @Inject
    Repository repository;

    @GET
    public String findAll() {
        return repository.findAll();
    }
}

After Running 
jakarta.enterprise.inject.AmbiguousResolutionException: Ambiguous dependencies for type com.ibm.cdi.service.interfaces.Repository and qualifiers [@Default]
	- injection target: com.ibm.cdi.service.interfaces.DatabaseResource#repository
	- declared on CLASS bean [types=[com.ibm.cdi.service.interfaces.DatabaseResource, java.lang.Object], qualifiers=[@Default, @Any], target=com.ibm.cdi.service.interfaces.DatabaseResource]

Quarkus does not which implementation to be picked sql or nosql...

Solution:

1.Using Qualifiers
2.Using @Named Annoation

Qualifiers are very complex, we need to write more code,so we can skip..

Using @Named Annotation:

package com.ibm.cdi.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;

@ApplicationScoped
@Named("sql")
public class SQLRepositoryImpl implements Repository{
    @Override
    public String findAll() {
        return "SQL FindAll";
    }
}

package com.ibm.cdi.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;

@ApplicationScoped
@Named("nosql")
public class NOSQLRepositoryImpl implements Repository {
    @Override
    public String findAll() {
        return "NoSql FindAll";
    }
}
package com.ibm.cdi.service.interfaces;

import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("database")
public class DatabaseResource {

    @Inject
    @Named("sql")
    Repository repository;

    @GET
    public String findAll() {
        return repository.findAll();
    }
}
....................................................................................
			Life cycle apis
...................................................................................

Life cycle apis are getting called automatically...

package com.ibm.cdi.service.lifecycles;

import io.quarkus.runtime.Shutdown;
import io.quarkus.runtime.Startup;
import io.quarkus.runtime.StartupEvent;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;

import java.util.List;

@ApplicationScoped
public class UserService {

    List list;

    @Startup
    public void init() {
        System.out.println("init method");
        list = List.of("Subramanian", "Admin", "Guest");
    }

    public List<String> getUsers() {
        return list;
    }

    @Shutdown
    public void destory() {
        //clean activity
    }

    public void start(@Observes StartupEvent startupEvent) {
        System.out.println("Startup event");
    }
}
package com.ibm.cdi.service.lifecycles;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("users")
public class UserResource {

    @Inject
    UserService userService;

    @GET
    public List<String> getUsers() {
        return userService.getUsers();
    }
}
.....................................................................................
		Reactive Types and Services
....................................................................................
package com.ibm.cdi.service.lifecycles;

import io.quarkus.runtime.Shutdown;
import io.quarkus.runtime.Startup;
import io.quarkus.runtime.StartupEvent;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;

import java.util.List;

@ApplicationScoped
public class UserService {

    List list;

    @Startup
    public void init() {
        System.out.println("init method");
        list = List.of("Subramanian", "Admin", "Guest");
    }

    public Uni<List<String>> getUsers() {
        return Uni.createFrom().item(list);
    }

    @Shutdown
    public void destory() {
        //clean activity
    }

    public void start(@Observes StartupEvent startupEvent) {
        System.out.println("Startup event");
    }
}
package com.ibm.cdi.service.lifecycles;

import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("users")
public class UserResource {

    @Inject
    UserService userService;

    @GET
    public Uni<List<String>> getUsers() {
        return userService.getUsers();
    }
}

Asssigment:

You have already built Book api..
YOu have to isloate all biz logic into services
......................................................................................












