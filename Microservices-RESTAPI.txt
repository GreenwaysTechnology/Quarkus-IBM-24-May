				Microservices
.....................................................................................
What are microservices?


Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world.

Let’s look at why its important to deliver software rapidly, frequently, reliably and sustainably.

Before MicroServices: 
 Monolothic ; single development,deployment.....

Microservices are collection of many design patterns.


microservices.io
Microservice chassis: - Core pattern
 ->Externalized configuration - sub pattern

MicroProfile config-->SmallyRye config ==== Externalized configuration


Build App:
 - You need to follow some standards (Design patterns)
                    |
       Monololithic ------------MicroServices
          |                        |
 Patterns for Monolithic 
                            Chassis   data managment  Reablility
				|	  |
			xxx,yyy		xxx,yyyy


....................................................................................
			 Micro services implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Ecplise Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.


Domain Modeling
................
ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

  Service is mini application.
  Service is sub domain in application 
  For eg in Ecommerce domain "ProductCaaglog" ,"Cusotmer Management","Order Management"

How to implement service?

  Service can be implemented as a java maven project...
  Service has apis

API: Application programming interface..
 Which exposes biz logic 
 Returns data , recevies data

Service API Design:

1.local api
  apis are exposed within objects, called by other objects
2.remote api
  apis are exposed within objects, called by other objects/programs via networks

Remote apis: (RPI)

1.webservices
   soap api /rest api/graphql api
2.RPC
   TCP api
   Grpc apis
3.MOM -Event Driven Microservices
  Using kafka,Rabbitmq.

..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microservice
  	  RESTFull Web Service using JAX-RS  Spec (Jakarta RESTful Web Services)
		      using RESTEasy Framework
.....................................................................................

Jakarta RESTful Web Services is spec of JEE , implementation is RestEasy Framework..

In Quarkus RestEasy has been modified for building non blocking apps


 			 QuarkusApp
			      |
	             Quarkus RestEasy Module
			      |
		         RestEasy Framwork
			     |
		   Jarkarta RestFull WebService

RESTEasy:

  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.
.....................................................................................
			  Types of RESTFull Web services 

1.Reactive web service - Highly Recommended
2.Non Reactive web service - Not recommended

How to identify the reactive and non reactive?

via maven dependencies.

Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Non Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>

Latest Version: Only Reactive
 <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest</artifactId>
        </dependency>

Both dependency cant be added in one single project , either reactive or non reactive.
.....................................................................................
			 Reactive,nonblocking Rest apis
....................................................................................
REST API development

Quarkus is based on JEE standards and MicroProfile standards

Quarkus rest api based on JAX-RS specification - Jakarta RESTful Web Services.

Quarkus implements RESTEasy Framework which is based on Jakarta WS.

RestEasy is based on Blocking and non blocking arch.

Quarkus by default adds Reactive(nonblocking) dependency.

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest</artifactId>
    </dependency>

Steps: create new Project:
G:\IBM\2024\May\Quarkus\restapi>quarkus create app code-with-quarkus-rest
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> tooling-dockerfiles
>> tooling-maven-wrapper
>> rest-codestart

-----------
[SUCCESS]  quarkus project has been successfully generated in:
--> G:\IBM\2024\May\Quarkus\restapi\code-with-quarkus-rest
-----------
Navigate into this directory and get started: quarkus dev

How to run quarkus app?

via quarkus cli command
via mvn or mvnw script.
.....................................................................................
			  REST API Core concepts
.....................................................................................

Resources:
   Domain Model which expose api which are accessed by clients using urls 

CustomerResource,ProductResource,PaymentResource etc....

RESTEasy is annotation driven based on jakarta spec:

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}
Common Annotations:

@Path - to map url
@GET -  http get
@POST - http post
@PUT -  http put
@DELETE - http delete.
....................................................................................
			 CURD Annotations
....................................................................................

package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //api
    @GET
    public String findAll(){
        return  "FindAll";
    }
    @POST
    public String create(){
        return  "Create";
    }
    @PUT
    public String update(){
        return  "Update";
    }

    @DELETE
    public String remove(){
        return  "Remove";
    }
}
.....................................................................................
			 Sub Resource
.....................................................................................
package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //api
    @GET
    public String findAll(){
        return  "FindAll";
    }

    @GET
    @Path("reviews")
    public String getReviews(){
        return "Reviews";
    }
    @POST
    public String create(){
        return  "Create";
    }
    @PUT
    public String update(){
        return  "Update";
    }

    @DELETE
    public String remove(){
        return  "Remove";
    }
}
....................................................................................
		 How to Pass data to REST API - Input Parameter
....................................................................................
Data can be passed to the End Point.

1.Through url - path parameter,query parameter,matrix parameter
                Matrix parameters are similar to query param, passing more than one 		parameter

2.Through payload
    Sending data part of the http body..

Through url: Parameters - Path Parameters

package com.ibm.rest.api.parameters;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("books")
public class BookResource {
    //path parameter
    //books/1 , /books/2 /books/3
    @GET
    @Path("{Id}")
    public  String findById(@PathParam("Id") Long id){
        return  "Books By Id : " + id;
    }
}

Query Parameters:
 /books?pages=100&unit=2

package com.ibm.rest.api.parameters;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.QueryParam;

@Path("books")
public class BookResource {
    //Query Parameters
    //localhost:8080/books/pages?totalPages=10&unit=3
    @GET
    @Path("pages")
    public String getPages(@QueryParam("totalPages") Long pages, @QueryParam("unit") Long unit) {
        return "Total pages " + pages + " Unit " + unit;
    }
}
.....................................................................................				Default values for Query Params
.....................................................................................
package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {


    //Query Parameters
    //localhost:8080/books/pages?totalPages=10&unit=3
    @GET
    @Path("pages")
    public String getPages(@QueryParam("totalPages") @DefaultValue("2") Long pages, @QueryParam("unit") @DefaultValue("1") Long unit) {
        return "Total pages " + pages + " Unit " + unit;
    }
}
.....................................................................................
				Matrix Parameters
....................................................................................

GET /books/info;category=story;language=english;author=John
package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {
    //Matrix parameter
    @GET
    @Path("info")
    public String getBookInfo(@MatrixParam("category")  @DefaultValue("category")     String category, @MatrixParam("lang") @DefaultValue("eng") String lang,     @MatrixParam("author") @DefaultValue("author") String author) {
        return category + lang + author;
    }
}
.....................................................................................
.....................................................................................
			    Context Object
.....................................................................................

Context Object provides information about "running container" and the application where we have deployed.


@Context

Context Information:
 =>URL Information
 =>Header informations
 =>Request information
 =>ServletRequest information
 =>ServletResponse information
 =>ServletConfig,Context,SecurityContext information

package com.ibm.rest.api.context;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.UriInfo;

@Path("context")
public class ContextResource {

    @GET
    public String getUrlInfo(@Context UriInfo uriInfo) {
        var absPath = uriInfo.getAbsolutePath().toString();
        var baseUri = uriInfo.getBaseUri();
        System.out.println(absPath);
        System.out.println(baseUri);
        return "Context Info" + absPath.toString() + " " + baseUri.toString();
    }

    @GET
    @Path("headers")
    public String getHeaderInfo(@Context HttpHeaders httpHeaders) {
        return httpHeaders.getRequestHeaders().toString();
    }
}
....................................................................................
			 How to read Payload
.....................................................................................

Generally data is submitted from client to rest api via some data formats such as json,xml, formdata etc...

How to submit data as Json to rest?


package com.ibm.rest.api.entity;

public class Order {
    private Integer orderId;
    private String orderStauts;
    private Double orderValue;

    public Order() {
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", orderStauts='" + orderStauts + '\'' +
                ", orderValue=" + orderValue +
                '}';
    }

    public Order(Integer orderId, String orderStauts, Double orderValue) {
        this.orderId = orderId;
        this.orderStauts = orderStauts;
        this.orderValue = orderValue;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public String getOrderStauts() {
        return orderStauts;
    }

    public void setOrderStauts(String orderStauts) {
        this.orderStauts = orderStauts;
    }

    public Double getOrderValue() {
        return orderValue;
    }

    public void setOrderValue(Double orderValue) {
        this.orderValue = orderValue;
    }
}
package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    //
    @POST
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }
}

Testing:

POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000,
    "comments": "This product has some discount"
}

The response 

415 Unsupported Media type..

By default Quarkus does not know how to convert JSON into Java Object...This means no json parser...
.....................................................................................					Extensions
....................................................................................
What is extension?

 extension is , project dependency- jar dependency.

By default, you can have extensions, when we create new project.

Think of Quarkus extensions are as your project dependencies.

Extensions configure,boot and integrate a framework or technology into your quarkus application.

They also do all of the heavy lifting of providing the right information to Graalvm For application to compile nativly.

How do you manage extensions?
  Management means - add,removing,list extensions

There are two way to get  extensions?

1.via maven or gradle
2.via cli -quarkus command.

 extension, ext          Configure extensions of an existing project.
    list, ls              List platforms and extensions.
    categories, cat       List extension categories.
    add                   Add extension(s) to this project.
    remove, rm            Remove extension(s) from this project.


Quarkus\rest\code-with-quarkus-rest>quarkus ext ls
Current Quarkus extensions installed:

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive

To get more information, append `--full` to your command line.

How to add extension?
 What extension we are going to add?

JSON Parser

old version
G:\IBM\2024\March\Quarkus\rest\code-with-quarkus-rest>quarkus ext add resteasy-reactive-jackson
[SUCCESS]  Extension io.quarkus:quarkus-resteasy-reactive-jackson has been installed

latest version
quarkus ext add io.quarkus:quarkus-rest-jackson

After Add extension:

POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000,
    "comments": "This product has some discount"
}

Response would be status code 200 and result 

saved
.....................................................................................	
.....................................................................................
			   Responses
.....................................................................................

What can be response?

REST API return any one of the following as type

1.String - plain/text
2.Objects/Collections - application/json , application/xml
3.void - No Return type , only Status - No Content
4.Response - Response Object
5.Reactive Type - Uni or Multi - Non Blocking api is enabled...

1.String - plain/text
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from Quarkus REST";
    }
}

2.Return Objects and Collection

 In order to return object or collection , we need to convert into json, we have jackson parser, so dont need to add...

package com.ibm.rest.api.payload;

package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;

@Path("orders")
public class OrderResource {


    @Path("single")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Order getSingleOrder() {
        return new Order(1, "Pending", 34.56, "this is nice product");
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }
}

How to return Collections?
package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;

import java.util.List;

@Path("orders")
public class OrderResource {


    @Path("single")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Order getSingleOrder() {
        return new Order(1, "Pending", 34.56, "this is nice product");
    }

    @GET
    public List<Order> getOrders() {
        return List.of(
                new Order(1, "PENDING", 1000.45, "Electronics"),
                new Order(2, "CREATED", 444.4, "Electronics"),
                new Order(3, "DISPATCHED", 344.89, "Electronics"),
                new Order(4, "INTRANSIT", 3434.90, "Electronics"),
                new Order(5, "CANCELLED", 1000.45, "Electronics"));
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }


}
.....................................................................................
....................................................................................
			  Response Object as Return Type
....................................................................................

What is advantage over objects when sent response object.

You can send additional information along with responses, like custom headers,tokens , some resource information

Response Object
  Response Object used to send "Payload" along with meta data(http status code, other informations)


HTTP Status Code:
1.informational status  100 to 199- 1X
2.success response -  200 - 299 - 2X
3.Redirects - 300-399 - 3X
4.Client Errors - 400-499 - 4X
5.Server errors - 500 - 599 - 5X

Response Class:
Response is abstract class contains two factory api..

public abstract Object getEntity()
public abstract int getStatus()

Builder class:

public static ResponseBuilder status(int status)
public static ResponseBuilder ok()

package com.ibm.rest.api.response;

import com.ibm.rest.api.entity.Product;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("products")
public class ProductsResource {

    @GET
    public Response getProducts() {
        List<Product> products = List.of(new Product(12l, "Tooth Paste", 34.89));
        return Response.ok().header("mycompany","ibm").entity(products).build();
    }

    @POST
    public Response save(){
        return  Response.status(201).build();
    }
}
....................................................................................
			void 
....................................................................................

It is usefull when we dont want to return any of data but only status- like noContent

package com.ibm.rest.api.response;

import com.ibm.rest.api.entity.Product;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("products")
public class ProductsResource {


    @DELETE
    public void remove(){
        System.out.println("Removed");
    }
   
}
.....................................................................................	
			 Reactive Response
....................................................................................
As we discussed already, Quarkus supports non blocking io arch.


Quarkus is running on Vertx Engine

Vertx engine uses non blocking infrastrastructure of the operating system.

Vertx Provides threading model which are two types of threads.

1.Non Blocking threads- Event Loop Threads.
2.Blocking threads or Worker Pool threads

Non Blocking threads or Event Loop Threads are used to multiplex the incoming requests.
Vertx Engine provides per cpu core two threads, if i have 12 core, then i would have 24 threads to handle incoming requests.

Worker pool threads are used to handle "Request Per  Thread model" - One request and one thread.

           "By default all Rest api runs on "Worker Pool thread"."


Testing Threads:
................
package com.ibm.rest.api.threading;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("workerthread")
public class WorkerThreadResource {
    @GET
    public String runonWorkerThread() {
        System.out.println(Thread.currentThread().getName());
        return "Hello";
    }
}
After running:
http://localhost:8080/workerthread

Output:
Thread  : executor-thread-1

Here exector-thread-1 is "Blocking thread" meaning that our code is running request per thread model. 

....................................................................................
     How to run the request handling using Event loop thread(nonBlocking thread)
...................................................................................

if your endpoint method needs to accomplish an async or reactive task before being able to answer to the client, you can declare your method to return "Uni/Multi",
in which case current http request to be turned as non blocking handled by "event loop thread", the current method will not return result immediately rather which suspends current http thread.

package com.ibm.rest.api.threading;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("nonblockingthread")
public class NonBlockingThreadResource {

    //return Uni

    @GET
    public Uni<String> getName() {
        System.out.println(Thread.currentThread().getName());
        return Uni.createFrom().item("Subramanian");
    }
}
....................................................................................
		  How to return List or Object via Mutiny
...................................................................................
package com.ibm.rest.api.reactive.mutiny;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("reactive")
public class ReactiveReponseResource {

    @GET
    public Uni<List<Product>> getProductsAsync() {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));
        return Uni.createFrom().item(products);
    }
}
....................................................................................
		Response Object with Reactive type
...................................................................................
package com.ibm.rest.api.reactive.mutiny;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("reactive")
public class ReactiveReponseResource {

    //response type
    @GET
    @Path("response")
    public Uni<Response> listProducts() {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        return Uni.createFrom()
                .item(products)
                .onItem()
                .transform(products1 -> Response.ok(products1).header("message", "products"))
                .onItem()
                .transform(Response.ResponseBuilder::build);

    }
}
.....................................................................................
.....................................................................................
.....................................................................................
			Blocking and Non Blocking Threading Models

Quarkus(Vertx) provides two types of threads

1.Event loop thread
   Thread which is used to build non blocking apps
   Vertx(Quarkus) provides limited no threads to handle large concurrency
   Quarkus enables event loop thread is activated to handle incoming request by 
   Mutiny type called "Uni or Multi"

2.Worker loop thread
    It is Request Per thread model threads, when ever new request comes, quarkus allocats new a spearate thread for that request , that thread cant be reused by other request.

.................................................................................
		The Golden Rule - Don’t Block the Event Loop thread
.................................................................................

Caution:
  You should not write any code  which blocks event loop thread.

if you block event loop thread, vertx engine throws warning and error(Thread Blocked Exception).

if the code is executed by "Event loop thread", inside that code we should not write any code which blocks that thread....

What are the code which blocks event loop thread.

1.Thread.sleep()
2.Waiting on a lock
3.Waiting on a mutex or monitor (e.g. synchronized section)
4.Doing a long lived database operation and waiting for a result
5.Doing a complex calculation that takes some significant time.
6.Spinning in a loop


I am going to simulate using Thread.sleep how to block event loop thread, then what will happen if you block.


package com.ibm.rest.api.threading;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("blocking")
public class BlockingEventLoopThread {

    @GET
    public Uni<Response> getResponse() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        //Block the Event loop thread
        Thread.sleep(1000);

        return Uni.createFrom().item(products)
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }
}

After running this code, you get response after 1000ms without any warning or error
now i am going to increase time.


package com.ibm.rest.api.threading;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("blocking")
public class BlockingEventLoopThread {

    @GET
    public Uni<Response> getResponse() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        //Block the Event loop thread
        Thread.sleep(5000);

        return Uni.createFrom().item(products)
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }
}

After increasing time we got exception

2024-03-14 15:30:51,826 WARN  [io.ver.cor.imp.BlockedThreadChecker] (vertx-blocked-thread-checker) Thread Thread[vert.x-eventloop-thread-1,5,main] has been blocked for 2572 ms, time limit is 2000 ms: io.vertx.core.VertxException: Thread blocked.


Here we can that got exception, the reason because the thread has been blocked for  more time.

Generally event loop thread can be blocked only for 2000ms which is default time out 

beyond that if try to block, Vertx will throw Exception, called "Thread Blocked"
Exception.
.....................................................................................

What if i want to write blocking operations inside the nonblocking code which returns Reactive?

@Blocking

package com.ibm.rest.api.threading;

import com.ibm.rest.api.entity.Product;
import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("blocking")
public class BlockingEventLoopThread {

    @GET
    @Blocking
    public Uni<Response> getResponse() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        //Block the Event loop thread
        Thread.sleep(5000);

        return Uni.createFrom().item(products)
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }
}
.....................................................................................

What if i want to run my code in delayed manner in async way in non blocking thread
i cant use Thread.sleep

>Thread.sleep => which is blocking scheduler
>onItem.delayIt() =>  Which is reactive scheduler

package com.ibm.rest.api.threading;

import com.ibm.rest.api.entity.Product;
import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.time.Duration;
import java.util.List;

@Path("blocking")
public class BlockingEventLoopThread {

    @GET
    @Blocking
    public Uni<Response> getResponse() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        //Block the Event loop thread
        Thread.sleep(5000);

        return Uni.createFrom().item(products)
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }

    @GET
    @Path("reactivescheduler")
    public Uni<Response> getResponseWithDelay() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1l, "Tooth Paste", 1233.00),
                new Product(2l, "Too brush", 123.00),
                new Product(3l, "Shaving cream", 500.00),
                new Product(1l, "Soap", 340.00));

        return Uni.createFrom().item(products)
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .delayIt().by(Duration.ofMillis(6000))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }
}
.....................................................................................
			How to handle Error/Exception
....................................................................................
.....................................................................................
What can be Response

Response Types:

1.SUCCESS Response
2.ERROR Response

How to handle / Convert ERRORS/Exceptions into HTTP Response Object?

 public Response getResponse(){

     return Response.ok().build();
 }


2.Application Exception
   
  UserNotFoundException
  PasswordMissMatchException
  ...
public boolean validate(){

  if(passwordmatch){


  }
  else{ 
       throw new PasswordMismatchException("password does not match");
  } 
}

JAX-RS also provides the javax.ws.rs.WebApplicationException.
 
This can be thrown by application code and automatically processed by JAX-RS without
having to write an explicit mapper.

..................................................................................			

Steps:

1.Write Exception mapper, which convert Exception into HTTP Success Response


package com.ibm.rest.api.exception;

package com.ibm.rest.api.exception;

import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

//@Provider annotation says to create object of this class during container startup
@Provider
public class WebApplicationExceptionMapper implements ExceptionMapper<WebApplicationException> {

    @Override
    public Response toResponse(WebApplicationException e) {
        return Response.ok().entity(e.getMessage()).build();
    }
}

2.Resource
package com.ibm.rest.api.exception;

package com.ibm.quarkus.responses.exceptions;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.WebApplicationException;

@Path("exception")
public class ExceptionResource {

    @GET
    public String getResponse(@QueryParam("name") String name) {
        if(name.equals("admin")){
            return "Hello";
        }
        throw new WebApplicationException("Something went wrong-Invalid Name");
    }
}
Assigment -1:

You have to build api
 Course Api
 
courseId:1
courseName:'Quarkus'
duration:40 hrs
startingDate: date
endingDate: date
category: 'java','js','ui','ai',
instructor: 'Subramanian'

Must have mock data -  can be stored into list or map.

1.return all courses
2.return course by id
3.filter courses by category
4.update course information by id
5.remove course by id
....................................................................................












