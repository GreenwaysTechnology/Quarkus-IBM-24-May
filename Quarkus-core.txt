
			     Quarkus
....................................................................................

What is Quarkus?
  Quarkus is java or JEE frame work and platform to build "modern cloud native" or "container native" or desktop "native java applications".

What is native?
  native is nothing but operating system.

cloud native : the cloud operating system
container native: The container's os like docker(linux)
desktop native: desktop operating system like linux,windows,mac

what is native application?
  Apps run on operating system without any vm abstractions.
eg: notepad,powerpoint ,word,browsers

can you run java apps without JVM?

We cant run java apps without JVM..

But now a days 

We can run apps without jvm as well......

Why java was created?
  Java was created to build platform independant apps
  Java achives platform indepandent via "JVM".


 Yes! without jvm generally we cant run java apps
but Now a days without jvm also you can run java apps- do you know how?
"Native"

How to turn jvm based apps into native apps?
  
   The technology we have called "GraalVM and HotSpot".

Why jvm based technology is not suitable now days?

Now days, we deploy apps on the cloud , containers where we need application start up very fast,less memory foot print.

in order to build apps to target cloud,containers to imporve performance we need mordern tech stack - GraalVM.
..................................................................................
			 GraalVM How it was inspired
.................................................................................

In order to understand how GraalVM was created, We need to understand "Java compiler".


Types of compilers:

1.Source code compiler - java source code to byte code - javac
2.Runtime compiler - JIT


Runtime Compiler: Hot Spot -Name of the Runtime compiler.

JIT - 
  ->C1 - Client - COREJAVA
  ->C2 - Server - J2EE

java -c1 MyApp
 
 MyApp is running on hot spot jit compiler which uses c1 compiler for optimization.

java -c2 MyServerApp

From  Java 5 on wards, c1 became optional in server and core apps- they merged one.


AOT and JIT
  Both are same , in order to improve code execution.

AOT : Before code execution, byte code been optimized..

JIT:  During code execution, byte code been optimized.
 C1 , C2

java --client Myapp  - c1

java --server MyApp -  c2

After java 7

java MyApp  (coimbine both c1 and c2)

Both c1 and c2 compiler written in c language.
.....................................................................................

Java 9 proposed a spec called "c2" compiler in java language itself.

JEP: Java Enchancement Proposal....

JDK Features
  (JIT) compiler features
C1-->C2 => ?

C2--->JVMCI -- says any body can write compiler not in c/c++ rather java itself.

C2--->JAVA Compiler

Oracle wrote the first compiler in java based on JVMCI specification called "graal"

C2 ---GRAAL compiler------> GraallVM  is platform  inspired from "Graal Compiler"

Now Graal is default JIT C2 compiler jdk 11 on wards...

Based on graal oracle created the technology called "GRAAL VM" Technology....

GrallVM = {native image,turfle framework}


GraalVM is extension of "Graal compiler" which was introduced in java 9 onwards.

GraalVM is just platform/tool to convert java apps into native binary apps.

Graal VM supports many other lanuages
 js,python,Ruby, R,WASM
.....................................................................................
Java Apps Running env
.....................

Running java apps with jvm mode.
...............................

1. Bare Metal desktop | Server
    os + JVM - windows + jvm 
2. Virtual Machine Env 
     where we can have more os - on that os we can have JVM...
3. Containers - Docker
     Where we can have light weight vm on which we can run java apps
     still we require JVM.
4. Cloud
      Where we can have os , vm or containers - still require JVM 


Running java apps without jvm mode -native mode.
.................................................
1. Bare Metal desktop | Server
    os - windows 
2. Virtual Machine Env 
     where we can have more os - on that os we dont need
3. Containers - Docker
     Where we can have light weight vm on which we can run java apps
     without jvm
4. Cloud
      Where we can have os , vm or containers we dont need jvm


You can run "Quarkus" apps 
   in two mode

=> JVM Mode -  Legacy
=> Native Mode - Modern
     =>Bare Metal Desktop - os can be any thing
     =>Container Native 
     =>Cloud Native 

.....................................................................................
				Java Standards
.....................................................................................
Sun Micro systems setup a body/commette in order to standarize the java technology.
  -JCP

What is JCP ?
 Java Community Process is non profitable organization whoes responsability is to standardize the java technology (java echo system).


What is JEP?
  JDK Enchament Proposal, Oracle own body to enchance the features of java
 The JDK Enhancement Proposal (or JEP) is a process drafted by Oracle Corporation for collecting proposals for enhancements to the Java Development Kit and OpenJDK.

JSR-Java Specifcation Request.

Every JSR has unique no - JSR-223

Java Technology Classification

1.JSE
2.JEE
3.JME

1.JSE - Java Standard Edition
  -Java language Spec
  -Java VM Spec

2.JEE - Java Enterise Edition
 The Java Enterprise Edition offers APIs and tools for developing multitier enterprise applications.

 -Application Development Specs
    JPA Spec  - Vendor netural ORM Solutions
    JSON Binding - JSON-B  
    Java Servlet 
    JAX-RS - Building Resfull API
    JAX-WS - Building xml based webservices -SOAP Webservices
    Bean Validation
    JTA  - Java Transaction API
    CDI - Context dependency injection
    etc...
 -Container Specs 
    Run time for java ee apps- websphere,weblogic....jboss,Tomcat

3.JME - Java Micro Edition
   For building Device Apps , Mobile Development.
   JME is mother of Android Technology.
.....................................................................................
		 JEE Specification and implementations
.....................................................................................

Why JEE Spec failed In Modern Computing?

     JEE Spec was developed to build traditional "Monolothic distributed,transactional, secure Applications".

How to build Micro services using java technology / on jvm?

=>Spring Team introduced an implementation under the project called "Spring Cloud"
  to build Microservices using java.


What was problem Spring faced?
  Spring introduced project which is not standardized by community like JCP.Which was propierty of Spring team.

What is the problem ?
  "Vendor lock"
  if any  new feature comes, we have to wait until spring team releases.

Spring was using "Netflix OSS" components in the begining, later Netflix stopped 
suport on many components,deprecated.
    "Failure of spring cloud projects started failing in the microservices develomement made java community very difficult."


IBM,RedHat,Oracle,Microsoft started thinking how to get out of "Vendor" lock based micro service development in java echo system.

		           Birth of One Spec
		          "Micro Profile Spec"

.....................................................................................
	    What if i want to build standard based microservices based On JEE?

                       "MicroProfile Specfication"


Micro Profile addresses the need for enterprise "java microservices"

  It is set of secifications for handling "microservices design patterns" 

MicroProfile enables JEE Developers to leverage their existing skill set while shifiting their focus from traditional monolithic applications to Micro Services

				JEE
				 |
			   Micro Profile
				 |
		     Microservice patterns and principles



....................................................................................

			    JEE Specification(JAX-RS,CDI)
				|
			Micro Profile Specifcation(MicroProfile config)
				|
       ------------------------------------------------------------
       |     |               |    |
    Quarkus  openliberty   TomEE  Payara etc....


Microservices specs+ Micropfile Spec+JEE Spec= Microservice implementation frameworks


What is Quarkus?
  Quarkus is the reference implementation of "JEE/MicroProfile Spec" framework.


Why Quarkus?

=> Quarkus is standard based(JEE/MicroProfile)
=> Quarkus is cloud/container/desktop native ready technology powered by graalvm
=> Quarkus is based on Non Blocking Architecture via Vert.x
=> Quarkus is Reactive Framework by default via Mutiny

MicroProfile Specs:

1.JAX-RS - To create HTTP based Microservices-
2.CDI - Context Dependency Injection - DI - Beans
3.JSON-B
4.Configuration
5.Falut Management
6.Health
7.Mertics
8.Reactive Messaging- How to even driven Microserivices
etc.....

....................................................................................
....................................................................................
			MicroProfile Implmentation inside Quarkus
..................................................................................

Quarkus Architecture with respect specification



			         QuarkusApp
				    |
	  		    Quarkus Api/Modules
				   |
			    ---------------------------------
		            |       |     |       |          |
			   
			 SmallRye Vertx  RestEasy Hibernate  Mutiny ...
			   |
                       MicroProfile Spec
                             +
                            JEE 
..

.....................................................................................				
SmallRye:
  It is the direct  reference implementation of MicroProfile Spec.
  Quarkus extends SmallRye for building micro servics ,Native Applications.

Ecplise Vert.x:
  Quarkus web apps are deployed on the top of "Vert.X Engine" which is eq to tomcat.
  We never use tomcat like blocking containers.
  Vertx modules(apis) also can be used inside Quarkus apps.

RestEasy:
	RestEasy is framework used to build  RESTful Web Services  based on JEE
 JAX-RS Spec.
        RestEasy has been tailered to match modern microservices.

Hibernate:
      It is ORM framework used inside Quarkus to implement JPA based 

Mutiny:
    It is reactive lib used inside Quarks to enable non blocking,async reactive programming.

Quarkus Features:

1.Implements MicroProfile specification via smallRye project
2.Quarkus implements Reactive Stack via smallRye Muntiny
3.Quarkus implements non blocking architecture via Vert.x Engine
4.Quarkus supports Kubernets,docker ready images
5.Quarkus supports native apps via GraalVM
     -Mandrel: A specialized distribution of GraalVM for Quarkus
6.Quarkus supports hot reloading
...................................................................................
				Quarkus Apps

Quarkus apps are microservices , so we can create microservices in many ways.

Every Micro services are based on API.

API Technology:
................
1.REST API
2.GraphQL API
3.Grpc API

In Quarkus we can design REST API,GRAPHQL API,Grpc API.

Http Based Microservice-REST Full Arch:

=>How to create REST API?
=>Depedency Injection -  CDI
=>ORM using JPA With Hibernate

Quarkus Apps can be 

 =>Reactive
	Means by default is non blocking 
 =>Non Reactive
        Means by default is blocking 
.....................................................................................
				Non Blocking
.....................................................................................

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			  Blocking and Non Blocking,Reactive
....................................................................................

Blocking, And Non Blocking;
...........................
File Descriptor is just c program
File descriptor is just array
For every process there is single file descriptor
When ever the process is created, file descriptor is initalized
File descriptor is bridge bewteen application process and io channels
File descriptor stores about information about hardware information like its address.
file descriptor is just table created by array using c language.
file descriptor is key-value paire structure using index and value

.....................................................................................
			Blocking IO and Threading (Multi threading)
...................................................................................

In threading env, thread is blocked, until the data is available , thread cant continue other jobs.
.....................................................................................
				Use Case: WebServer
....................................................................................

if more request, more threads are created.

What if i create more threads?

Evils of Threads:

1.when you create thread

 ->It requires some amount of memory
  if you create more threads, it requires more memory

2.in order to manage memory, in 2000 linux os , introduced a concept called context switch.
   if any thread is not used for particular period of time, that thread is moved into passive state, once the data is available it can be brought back - CPU does this job.


C10K problem:
  How to reduce threads, if you reduce threads, you can save memory and cpu.

if you want to reduce thread,you have to look at different way of writing io programs,

Each user(io) request is mapped against one single thread.

.....................................................................................
			 Birth of Non Blocking IO Arch
.....................................................................................
Non Blocking implementation in linux:


1.select + read
  select makes api call to the kernal and return control back to process
  Process keeps on calling kernal with read method in order to read data...


2.Poll api
   Poll is second api which improved select where as poll pushes data from the kernal  to application process rather than explcit read call from the application.
  Poll introduced new programming model inside kernal called "Event Driven"


3.Epoll api

  EPoll is Third api which improved poll where as poll pushes data from the kernal to application process rather than explcit read call from the application.
  Poll introduced new programming model inside kernal called "Event Driven"

.....................................................................................
			IO Multiplxing implementations
....................................................................................

1.nginx
   This is first non blocking webserver based on c10k problem.

2.Node.js
   This is second reference implementation based on non blocking arch

These both implementations written in linux,that linux only supported non blocking apis.

Later windows,mac,other Open BSD os introduced non blocking io apis....


Epoll – Linux
Kqueue –Open BSD including mac
IOCP - Windows
.................

.....................................................................................
			   Vertx Threading Model
.....................................................................................

Vertx provides two types of threads

1.Non Blocking threads  aka Event loop threads
   To handle non blocking io operations like webservers,tcp servers ...
2.Blocking threads/Worker threads
   To handle one thread , one job.


How many non blocking threads per process(jvm)?

 in node js , only one thread- This is limitation.
 in vertx multiple non blocking threads - per cpu =2 threads
  12 *2 =24
  50*2 =100

 incase of multiple event loop threads, which thread handles request?

  Vertx uses an algorthim called "round robin"

  request-1 - t1
  request-2 -t2
  request-24 -t24
  request-25-t1
.....................................................................................
				Roles of thread

1.Get IO REQUEST,deligate to kernal
2.Process events which dispatched from the kernal
.....................................................................................
			  Reactive Programming
.....................................................................................

What is reactive programming?

In computing, reactive programming is a declarative programming paradigm concerned with data stream

->declarative programming
->data streams
->propagation of change


In order to understand reactive, we need to understand object communications

Java and Reactive Programming implementation:
 
Reactive programming in Java 

1.Rxjava 1.x
2.Rxjava 2.x,Rx 3, Rx 4
3.Project Reactor
4.Java 9 onwards
5.Mutiny - which is used by Quarkus...

Reactive Programming implementation from the Quarkus is Mutiny...
.....................................................................................

Quarkus App  =  {Mutiny} => Enables vertx non blocking
Quarkus App   = {without Mutiny} Disables vertx non blocking...
.....................................................................................
.....................................................................................
			Mutiny Getting started
.....................................................................................


Mutiny was built by Red hat team,relased under smallRye project
Mutiny first integrated with Quarkus, later with Vertx.
Mutiny is reactive stream certified
Mutiny is the perfect companion to tame the async nature of apps with non blocking io. 

Reactive Implementation:

Steps: 

1.Create standalone Mutiny java maven project

....................................................................................
			 Core Concepts of Muntiny
....................................................................................

Publisher:
  Object - Provider of data 
  Who publish events
Subscriber:
  Object - Receiver of data
  Who listens for events
Subscription -
   Object who conects Publisher and Subscriber in back end.
Operators 
   Are apis provided to process "stream of data"

Events: - data,error,complete
1.onItem -  onData - -> data event published by publisher when ever the data is available
2.onFailure - onError - error event published by publisher when ever the error occurred.
3.onComplete -  No more data /error published by publisher...

Muntiny Publishers Types:

1.Uni 
  Emit o or 1 item
  Mono in spring
2.Multi 
   1..to Many items - Stream
 Flux in Spring


Steps:
1.create Publisher
2.emits data or error events
3.subscribe for data or error events.

package com.ibm.reactive.mutiny;

import io.smallrye.mutiny.Uni;

public class UniHelloWorld {
    public static void main(String[] args) {
        Uni.createFrom().item("Hello").subscribe().with(item-> System.out.println(item));
    }
}

How to emit error event?
package com.ibm.reactive.mutiny;

import io.smallrye.mutiny.Uni;

public class ErrorEvent {
    public static void main(String[] args) {
        Uni.createFrom().failure(new RuntimeException("something went wrong")).subscribe().with(data->{},err->{
            System.out.println(err.getMessage());
        });
    }
}
Use case : How to process data?
Transformation
Filtering..

Transformation:
package com.ibm.reactive.mutiny;

import io.smallrye.mutiny.Uni;

public class UniTransformation {
    public static void main(String[] args) {
        Uni.createFrom()
                .item("hello")
                .onItem()
                .transform(String::toUpperCase)
                .subscribe()
                .with(System.out::println);
    }
}

Multi:
 o to N items

package com.ibm.reactive.mutiny;

import io.smallrye.mutiny.Multi;

public class MultiStream {
    public static void main(String[] args) {
        Multi.createFrom().items(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).subscribe().with(System.out::println);
    }
}

Stream processing with Multi:
............................
package com.ibm.reactive.mutiny;

import io.smallrye.mutiny.Multi;

public class MultiStreamProcessing {
    public static void main(String[] args) {
        Multi.createFrom()
                .range(1, 25)
                .onItem()
                .transform(i -> i * 3)
                .filter(j -> j % 2 != 0)
                .subscribe()
                .with(System.out::println);
    }
}
....................................................................................
				Quarkus Setup
....................................................................................

Setup : software dependency:

JDK 17
  => You can ins
Oracle JDK 11 or JDK 17 or Open JDK 11 or JDK 17
Maven =>Optional dependency
IDE : Intellij Idea Community edition.
Docker and kubernets for windows



Project setup patterns:
 Quarkus apps can be setup many ways.

1.Quarkus CLI
2.Maven 
3.on line Templates -  https://code.quarkus.io/


1.Quarkus CLI

JBang:
  Tool need to be installed first , through which we can install Quarkus cli

https://quarkus.io/get-started/

Windows:
 1.powershell or wsl or bash shell

Step : 1 : install jbang build tool via windows powershell with admin access

iex "& { $(iwr https://ps.jbang.dev) } trust add https://repo1.maven.org/maven2/io/quarkus/quarkus-cli/"
iex "& { $(iwr https://ps.jbang.dev) } app install --fresh --force quarkus@quarkusio"


Step 2: Test Quarkus cli

quarkus --help

Usage: quarkus [-ehv] [--refresh] [--verbose] [--config=CONFIG]
               [-D=<String=String>]... [COMMAND]
Options:
      --refresh         Refresh the local Quarkus extension registry cache
      --config=CONFIG   Configuration file
  -h, --help            Display this help message.
  -v, --version         Print CLI version information and exit.
  -e, --errors          Print more context on errors and exceptions.
      --verbose         Verbose mode.
  -D=<String=String>    Java properties

Commands:
  create                  Create a new project.
    app                   Create a Quarkus application project.
    cli                   Create a Quarkus command-line project.
    extension             Create a Quarkus extension project
  build                   Build the current project.
  dev                     Run the current project in dev (live coding) mode.
  run                     Run application.
  test                    Run the current project in continuous testing mode.
  extension, ext          Configure extensions of an existing project.
    list, ls              List platforms and extensions.
    categories, cat       List extension categories.
    add                   Add extension(s) to this project.
    remove, rm            Remove extension(s) from this project.
  image                   Build or push project container image.
    build                 Build a container image.
      docker              Build a container image using Docker.
      buildpack           Build a container image using Buildpack.
      jib                 Build a container image using Jib.
      openshift           Build a container image using Openshift.
    push                  Push a container image.
  deploy                  Deploy application.
    kubernetes            Perform the deploy action on kubernetes.
    openshift             Perform the deploy action on openshift.
    knative               Perform the deploy action on knative.
    kind                  Perform the deploy action on kind.
    minikube              Perform the deploy action on minikube.
  registry                Configure Quarkus registry client
    list                  List enabled Quarkus registries
    add                   Add a Quarkus extension registry
    remove                Remove a Quarkus extension registry
  info                    Display project information and verify versions
                            health (platform and extensions).
  update, up, upgrade     Suggest recommended project updates with the
                            possibility to apply them.
  version                 Display CLI version information.
  plugin, plug            Configure plugins of the Quarkus CLI.
    list, ls              List CLI plugins.
    add                   Add plugin(s) to the Quarkus CLI.
    remove                Remove plugin(s) to the Quarkus CLI.
    sync                  Sync (discover / purge) CLI Plugins.
  completion              bash/zsh completion:  source <(quarkus completion)

Step 3: Create Project using quarkus cli tool

quarkus create app code-with-quarkus-cli

Looking for the newly published extensions in registry.quarkus.io
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> dockerfiles
>> maven-wrapper
>> resteasy-reactive-codestart

-----------
[SUCCESS] quarkus project has been successfully generated in:
--> E:\session\ibm\2023\jan\QuarkusSession\code-with-quarkus-cli
-----------
Navigate into this directory and get started: quarkus dev


Lanuch the project in IDE.

1.IntelliJ idea
2.VS Code
....................................................................................
				Exploring Quarkus Project
....................................................................................

Quarkus project since maven project, maven project layout you can see.

code-with-quarkus-cli
  |
  pom.xml
  mvnw       - linux,mac -script files to run quarkus app
  mvnw.cmd  -  windows - script files to run quarkus app

 src
  |
  main
    |
    docker - having docker files to build docker image
    java  - having source code
    ressources - property files and some static assets

Step 3:
 How to run quarkus project

1.using quarkus cli
2.using quarkus mvn plugin
3.using mvn
 
We have two modes to run quarkus project

1.Dev mode
2.Production Mode


Dev Mode:

using cli:

>quarkus dev

using quarkus mvn plugin.

 ./mvnw compile quarkus:dev 
    if you run via powershell or bash shell

 mvnw compile quarkus:dev
   if you run via normal command prompt

using mvn:
 Make sure that you have install mvn installed

 mvn compile quarkus:dev
.....................................................................................
....................................................................................				  How to create Quarkus Project using Maven
....................................................................................

Step 1: Make sure maven has been installed
 https://maven.apache.org/download.cgi

Step 2: Use git bash shell
mvn io.quarkus.platform:quarkus-maven-plugin:3.8.2:create \
    -DprojectGroupId=org.acme \
    -DprojectArtifactId=code-with-quarkus-maven \
    -Dextensions='resteasy-reactive'
		
It is not recommended way of creating project
....................................................................................
.................................................................................
			 How to create project via code.quarkus.io
...................................................................................
https://code.quarkus.io/?a=myquarkusgradleapp&b=GRADLE&e=resteasy-reactive
...................................................................................
Running Project:

quarkus dev
./mvnw compile quarkus:dev -  bash shell
or
mvnw compile quarkus:dev - normal command
or
mvn compile quarkus:dev - via installed mvn command

...................................................................................
			  Hot reloading
....................................................................................

Painfull process in regular development is change code,save,compile,redeloy-
Quarkus offers hot reloading feature
  Just write code, and save
    Quarkus takes care of compilation,building,redloyment automatically.
.....................................................................................
	








